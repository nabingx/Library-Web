-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

insert into "Library"("Book_ID", "BookName", "Category", "Version", "Author", "Public_Date", "Public_Company", "Book_Status")
values
(2, 'Na và những người bạn 2', 'Tiểu thuyết', 3, 'Mousseir Na', '2021-12-18', 'Million Na', 'false'),
(3, 'Mistake', 'Truyện trinh thám', 1, 'Mrs.Na', '2022-12-20', 'Million Na', 'true'),
(4, 'Doraemon', 'Manga', 10, 'Fujio F.Fujiko', '2020-12-10', 'Million Na', 'false'),
(5, 'Nobita', 'Manga', 15, 'Fujio F.Fujiko', '2020-8-21', 'Million Na', 'true');

SELECT DISTINCT "Author" FROM "Library";
SELECT DISTINCT "Category" FROM "Library";
SELECT * FROM "Library" WHERE "Book_ID" = 1;


CREATE TABLE IF NOT EXISTS public."Library"
(
    "Book_ID" serial NOT NULL,
    "BookName" character varying(200) NOT NULL,
    "Category" character varying(200) NOT NULL,
    "Version" smallint,
    "Author" character varying(200) NOT NULL,
    "Public_Date" date NOT NULL,
    "Public_Company" character varying(200) NOT NULL,
    "Book_Status" boolean NOT NULL,
    PRIMARY KEY ("Book_ID")
);

CREATE TABLE IF NOT EXISTS public."Book"
(
    "Book_ID" serial NOT NULL,
    "Quantity" integer NOT NULL,
    "Order_Quantity" integer,
    "Price" money NOT NULL,
    PRIMARY KEY ("Book_ID")
);

CREATE TABLE IF NOT EXISTS public."User"
(
    "User_ID" serial NOT NULL,
    "Email" character varying(200) NOT NULL,
    "Password" character varying(20) NOT NULL,
    "PhoneNum" character varying(20) NOT NULL,
    "UserAddr" character varying(200) NOT NULL,
    "DoB" date NOT NULL,
    PRIMARY KEY ("User_ID"),
    CONSTRAINT email_unique UNIQUE ("Email")
);

CREATE TABLE IF NOT EXISTS public."Admin"
(
    "User_ID" serial NOT NULL,
    "Email" character varying(200) NOT NULL,
    "Password" character varying(20) NOT NULL,
    PRIMARY KEY ("User_ID"),
    CONSTRAINT "Email_unique" UNIQUE ("Email")
);

CREATE TABLE IF NOT EXISTS public."Contact_Lib"
(
    "LibID" smallserial NOT NULL,
    "LibraryName" character varying(200) NOT NULL,
    "LibraryPhoneNum" character varying(20) NOT NULL,
    "LibraryEmail" character varying(200) NOT NULL,
    "LibraryAddress" character varying(200) NOT NULL,
    PRIMARY KEY ("LibID")
);

CREATE TABLE IF NOT EXISTS public."Request"
(
    "Request_ID" serial NOT NULL,
    "User_ID" serial NOT NULL,
    "Content" character varying(1000) NOT NULL,
    PRIMARY KEY ("Request_ID")
);

CREATE TABLE IF NOT EXISTS public."Comment"
(
    "User_ID" serial NOT NULL,
    "Book_ID" serial NOT NULL,
    "Comment" character varying(1000) NOT NULL,
    "Rating" smallint NOT NULL,
    PRIMARY KEY ("User_ID", "Book_ID")
);

CREATE TABLE IF NOT EXISTS public."Order"
(
    "Order_ID" serial NOT NULL,
    "User_ID" serial NOT NULL,
    "Book_ID" serial NOT NULL,
    "TotalTime" integer NOT NULL,
    "Price" money NOT NULL,
    PRIMARY KEY ("Order_ID")
);

CREATE TABLE IF NOT EXISTS public."ReqHistory"
(
    "Request_ID" serial NOT NULL,
    "User_ID" serial NOT NULL,
    "Content" character varying NOT NULL,
    PRIMARY KEY ("Request_ID")
);

ALTER TABLE IF EXISTS public."Book"
    ADD FOREIGN KEY ("Book_ID")
    REFERENCES public."Library" ("Book_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Request"
    ADD CONSTRAINT user_fk FOREIGN KEY ("User_ID")
    REFERENCES public."User" ("User_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Comment"
    ADD CONSTRAINT user_fk FOREIGN KEY ("User_ID")
    REFERENCES public."User" ("User_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Comment"
    ADD CONSTRAINT book_fk FOREIGN KEY ("Book_ID")
    REFERENCES public."Library" ("Book_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Order"
    ADD CONSTRAINT user_id FOREIGN KEY ("User_ID")
    REFERENCES public."User" ("User_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Order"
    ADD CONSTRAINT book_id FOREIGN KEY ("Book_ID")
    REFERENCES public."Library" ("Book_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."ReqHistory"
    ADD CONSTRAINT user_fk FOREIGN KEY ("User_ID")
    REFERENCES public."User" ("User_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;