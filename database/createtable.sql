-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Library"
(
    "Book_ID" serial NOT NULL,
    "BookName" character varying(200) NOT NULL,
    "Category" character varying(200) NOT NULL,
    "Version" smallint,
    "Author" character varying(200) NOT NULL,
    "Public_Date" date NOT NULL,
    "Public_Company" character varying(200) NOT NULL,
    "Overview" character varying(200),
    "Book_Status" boolean NOT NULL,
    PRIMARY KEY ("Book_ID")
);

CREATE TABLE IF NOT EXISTS public."Book"
(
    "Book_ID" serial NOT NULL,
    "Quantity" integer NOT NULL,
    "Order_Quantity" integer,
    "Price" money NOT NULL,
    PRIMARY KEY ("Book_ID")
);

CREATE TABLE IF NOT EXISTS public."User"
(
    "User_ID" serial NOT NULL,
    "Email" character varying(200) NOT NULL,
    "Password" character varying(20) NOT NULL,
    "PhoneNum" character varying(20) NOT NULL,
    "UserAddr" character varying(200) NOT NULL,
    "Name" character varying(200) NOT NULL,
    PRIMARY KEY ("User_ID"),
    CONSTRAINT email_unique UNIQUE ("Email"),
    CONSTRAINT name_unique UNIQUE ("Name")
);

CREATE TABLE IF NOT EXISTS public."Admin"
(
    "User_ID" serial NOT NULL,
    "Email" character varying(200) NOT NULL,
    "Password" character varying(20) NOT NULL,
    PRIMARY KEY ("User_ID"),
    CONSTRAINT "Email_unique" UNIQUE ("Email")
);

CREATE TABLE IF NOT EXISTS public."Contact_Lib"
(
    "LibID" smallserial NOT NULL,
    "LibraryName" character varying(200) NOT NULL,
    "LibraryPhoneNum" character varying(20) NOT NULL,
    "LibraryEmail" character varying(200) NOT NULL,
    PRIMARY KEY ("LibID")
);

CREATE TABLE IF NOT EXISTS public."Request"
(
    "Request_ID" serial NOT NULL,
    "User_ID" serial NOT NULL,
    "Content" character varying(1000) NOT NULL,
    status character varying(100) NOT NULL,
    PRIMARY KEY ("Request_ID")
);

CREATE TABLE IF NOT EXISTS public."Comment"
(
    "User_ID" serial NOT NULL,
    "Book_ID" serial NOT NULL,
    "Comment" character varying(1000) NOT NULL,
    "Rating" smallint NOT NULL,
    PRIMARY KEY ("User_ID", "Book_ID")
);

CREATE TABLE IF NOT EXISTS public."Order"
(
    "Order_ID" serial NOT NULL,
    "User_ID" serial NOT NULL,
    "Book_ID" serial NOT NULL,
    "TotalTime" integer NOT NULL,
    "Price" money NOT NULL,
    PRIMARY KEY ("Order_ID")
);

CREATE TABLE IF NOT EXISTS public."Category"
(
    "Category_Name" character varying(200) NOT NULL,
    PRIMARY KEY ("Category_Name")
);

CREATE TABLE IF NOT EXISTS public."Author"
(
    "Author_Name" character varying(200) NOT NULL,
    PRIMARY KEY ("Author_Name")
);

ALTER TABLE IF EXISTS public."Library"
    ADD CONSTRAINT author_fk FOREIGN KEY ("Category")
    REFERENCES public."Category" ("Category_Name") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Library"
    ADD CONSTRAINT cate_fk FOREIGN KEY ("Author")
    REFERENCES public."Author" ("Author_Name") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Book"
    ADD FOREIGN KEY ("Book_ID")
    REFERENCES public."Library" ("Book_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Request"
    ADD CONSTRAINT user_fk FOREIGN KEY ("User_ID")
    REFERENCES public."User" ("User_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Comment"
    ADD CONSTRAINT user_fk FOREIGN KEY ("User_ID")
    REFERENCES public."User" ("User_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Comment"
    ADD CONSTRAINT book_fk FOREIGN KEY ("Book_ID")
    REFERENCES public."Library" ("Book_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Order"
    ADD CONSTRAINT user_id FOREIGN KEY ("User_ID")
    REFERENCES public."User" ("User_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Order"
    ADD CONSTRAINT book_id FOREIGN KEY ("Book_ID")
    REFERENCES public."Library" ("Book_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;